// A Kage port of https://www.shadertoy.com/view/Xd3yzs

//kage:unit pixels
package main

//TODO: var Direction float
var Duration float
var Time float

// Pixel Size.
const kPixelSize float = 8

// How wide the pixelized "wave" is.
const kTransitionSpread float = 0.15

// How fast the wave moves.
//const kTransitionSpeed float = 0.25
const kTransitionIntensity float = 16.0

func Fragment(dst vec4, src vec2, _ vec4) vec4 {
    // Normalized pixel coordinates (from 0 to 1)
    /*vec2 uv = fragCoord/iResolution.xy;*/
    origin, size := imageSrc0Origin(), imageSrc0Size()

    kTransitionSpeed := 1.0 / Duration

    // offset needed for transition time since it starts outside the screen
    // and we want to skip the apparent delay
    kTimeOffset := (Duration - kTransitionSpread) / 2.0

    iTime := Time + kTimeOffset
    if iTime > Duration + kTimeOffset {
		iTime = Duration + kTimeOffset
	}

    // Figure out which pixelated "cell" each fragment belongs to.
    /*vec2 noise_cell = floor(fragCoord / kPixelSize);
    vec2 noise_uv = noise_cell / (iChannelResolution[0].xy);*/
    noise_uv := (floor((src-origin) / kPixelSize)*kPixelSize)

    /*float noise = texture(iChannel0, noise_uv).x * kTransitionSpread;
    float progress = (iTime * kTransitionSpeed) + noise_uv.y + noise;
    float peak = cos(progress) * kTransitionIntensity;*/
    noise := imageSrc2At(noise_uv+origin).x * kTransitionSpread
    progress := (iTime * kTransitionSpeed) + (1-noise_uv.y/size.y) + noise
    peak := cos(progress) * kTransitionIntensity

    // How much of the first image vs the second should this fragment show.
    /*float transition = clamp(peak, 0.0, 1.0);*/
    transition := clamp(peak, 0.0, 1.0)

    // Final transition mix
    /*vec3 img1 = texture(iChannel1, uv).xyz;
    vec3 img2 = texture(iChannel2, uv).xyz;
    vec3 col = mix(img1, img2, transition);*/
    img1 := imageSrc0At(src).xyz
    img2 := imageSrc1At(src).xyz
    col := mix(img2, img1, transition)

    // Output to screen
    return vec4(col, 1)
}
